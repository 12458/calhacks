syntax = "proto3";

message Packet {
  // Unique identifier for the packet (UUID4 format)
  string packet_uuid = 1;

  // Enum to specify the type of packet
  PacketType packet_type = 2;

  // Oneof to hold different types of messages
  oneof payload {
    NetworkMessage network_message = 3;
    AckMessage ack_message = 4;
    DiscoverMessage discover_message = 5;
    AnnounceMessage announce_message = 6;
  }
}

// Enum to represent different packet types
enum PacketType {
  NETWORK_MESSAGE = 0;
  ACK_MESSAGE = 1;
  DISCOVER_MESSAGE = 2;
  ANNOUNCE_MESSAGE = 3;
}

message NetworkMessage {
  // Unique identifier for the node sending the message
  string node_id = 1;

  // Timestamp for when the message was sent, in UNIX format
  uint32 timestamp = 2;

  // GPS coordinates (latitude and longitude) of the node (optional)
  Location sender_location = 3;

  // Actual text message being sent
  bytes message_content = 4;

  // Destination: could be either a node UID or telephone number
  string destination = 5;
}

// Message type for acknowledgment
message AckMessage {
  // Unique identifier for the original message being acknowledged
  string message_id = 1;

  // Unique identifier of the node sending the ACK
  string node_id = 2;

  // Timestamp for when the ACK was sent, in UNIX format
  uint32 timestamp = 3;
}

// Message type for discovery request
message DiscoverMessage {
  // Timestamp for when the discover message was sent, in UNIX format
  uint32 timestamp = 1;
}

// Message type for node announcement
message AnnounceMessage {
  // Unique identifier of the node announcing itself
  string node_id = 1;

  // Timestamp for when the announce message was sent, in UNIX format
  uint32 timestamp = 2;

  // Optional location information of the announcing node
  Location node_location = 3;
}

// Structure to capture location details
message Location {
  double latitude = 1;
  double longitude = 2;
}